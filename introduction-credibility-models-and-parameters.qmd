---
format:
  html:
    code-fold: false #true?
jupyter: julia-1.7
---

# Introduction: Credibility, Models, and Parameters

## Bayesian inference is reallocation of credibility across possibilities

To make Figure 2.1 we need data. We will create some synthetic data and store it in using `DataFrames.jl`

```{julia}
#| warning: false
#| output:false

using DataFrames

function expand_grid(; iters...)
    var_names = collect(keys(iters))
    var_itr = [1:length(x) for x in iters.data]
    var_ix = vcat([collect(x)' for x in Iterators.product(var_itr...)]...)
    out = DataFrame()
    for i = 1:length(var_names)
        out[:,var_names[i]] = collect(iters[i])[var_ix[:,i]]
    end
    return out
end

d = expand_grid(iteration=1:3, Possibilities=["A", "B","C", "D"], stage = ["Prior", "Posterior"])

d2 =DataFrame(Credibility =[fill(.25,4); 0; fill(1/3,3); 0; fill(1/3,3);0;.5;0;0.5;0;.5;0;0.5;fill(0,3);1])

sort!(d, [:iteration])
d.Credibility = d2.Credibility

```

Here we are defining a function that creates combinations and then I just bind that we the Credibility values we will use for plotting. 

We can take a look at the top few rows of the data with the `first()` function.

```{julia}
first(d,5)
```

Now lets plot our version of Figure 2.1. To do so, we will use the `Gadfly.jl` package. This is my preferred plotting package because it has similar syntax to ggplot2 package in R.


```{julia}
#| warning: false

using Gadfly
using DataFramesMeta

#Specify the plot size
set_default_plot_size(16cm, 18cm)

df_Prior = @where(d, :stage .== "Prior")
df_Posterior = @where(d, :stage .== "Posterior")

fig1a = plot(df_Prior,
    xgroup = :iteration,
    x = :Possibilities,
    y = :Credibility,
    Geom.subplot_grid(Geom.bar(orientation = :vertical)),
    Guide.xlabel("Possibilities"),
    Guide.ylabel("Credibility"),
    Guide.title("Prior"),
    Scale.y_continuous(format = :plain),
    Theme(
        background_color = "white",
        bar_spacing = 1mm,
        grid_color = "white"
    )
)
fig1b = plot(df_Posterior,
    xgroup = :iteration,
    x = :Possibilities,
    y = :Credibility,
    Geom.subplot_grid(Geom.bar(orientation = :vertical)),
    Guide.xlabel("Possibilities"),
    Guide.ylabel("Credibility"),
    Guide.title("Posterior"),
    Scale.y_continuous(format = :plain),
    Theme(
        background_color = "white",
        bar_spacing = 1mm,
        grid_color = "white"
    )
)
#create a subplot
vstack(fig1a,fig1b)
```


