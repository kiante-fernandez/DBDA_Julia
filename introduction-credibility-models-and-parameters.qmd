---
format:
  html:
    code-fold: false #true?
jupyter: julia-1.7
---

# Introduction: Credibility, Models, and Parameters

## Bayesian inference is reallocation of credibility across possibilities

To make Figure 2.1 we need data. We will create some synthetic data and store it in using `DataFrames.jl`

```{julia}
#| warning: false
#| output: false

using DataFrames

function expand_grid(; iters...)
    var_names = collect(keys(iters))
    var_itr = [1:length(x) for x in iters.data]
    var_ix = vcat([collect(x)' for x in Iterators.product(var_itr...)]...)
    out = DataFrame()
    for i = 1:length(var_names)
        out[:,var_names[i]] = collect(iters[i])[var_ix[:,i]]
    end
    return out
end

d = expand_grid(iteration=1:3, Possibilities=["A", "B","C", "D"], stage = ["Prior", "Posterior"])

d2 =DataFrame(Credibility =[fill(.25,4); 0; fill(1/3,3); 0; fill(1/3,3);0;.5;0;0.5;0;.5;0;0.5;fill(0,3);1])

sort!(d, [:iteration])
d.Credibility = d2.Credibility

```

Here we are defining a function that creates combinations and then I just bind that we the Credibility values we will use for plotting. 

We can take a look at the top few rows of the data with the `first()` function.

```{julia}
first(d,5)
```

Now lets plot our version of Figure 2.1. To do so, we will use the `Gadfly.jl` package. This is my preferred plotting package because it has similar syntax to ggplot2 package in R.


```{julia}
#| warning: false
#| echo: false

using Gadfly
using DataFramesMeta

#Specify the plot size
set_default_plot_size(16cm, 18cm)

df_Prior = @where(d, :stage .== "Prior")
df_Posterior = @where(d, :stage .== "Posterior")

fig1a = plot(df_Prior,
    xgroup = :iteration,
    x = :Possibilities,
    y = :Credibility,
    Geom.subplot_grid(Geom.bar(orientation = :vertical),
    Guide.xlabel(orientation= :horizontal),
    Guide.xticks(orientation = :horizontal)),
    Guide.xlabel("Possibilities"),
    Guide.ylabel("Credibility"),
    Guide.title("Prior"),
    Scale.y_continuous(format = :plain),
    Theme(
        background_color = "white",
        bar_spacing = 1mm,
        grid_color = "white"
    )
)
fig1b = plot(df_Posterior,
    xgroup = :iteration,
    x = :Possibilities,
    y = :Credibility,
    Geom.subplot_grid(Geom.bar(orientation = :vertical),
    Guide.xlabel(orientation= :horizontal),
    Guide.xticks(orientation = :horizontal)),
    Guide.xlabel("Possibilities"),
    Guide.ylabel("Credibility"),
    Guide.title("Posterior"),
    Scale.y_continuous(format = :plain),
    Theme(
        background_color = "white",
        bar_spacing = 1mm,
        grid_color = "white"
    )
)
#create a subplot
vstack(fig1a,fig1b)
```

https://stackoverflow.com/questions/50925450/gadfly-julia-how-to-add-text-annotation-to-a-plot

```{julia}
using Compose #need to add Pkg still.
#to add the text to the plotting
#Guide.annotation(compose(context(), text(0.8, 0.8, "Some text")

```

### Data are noisy and inferences are probabilistic.

```{julia}
using Gadfly
using Distributions

set_default_plot_size(16cm, 18cm)

d = Normal()
σ = 2
x1 = rand(Normal(1, σ), 10^5)
x2 = rand(Normal(4, σ), 10^5)
x3 = rand(Normal(7, σ), 10^5)
x4 = rand(Normal(10, σ), 10^5)
using DataFrames
x5 = DataFrame(Possibilities = 1, Credibility = 0.2)
x6 = DataFrame(Possibilities = 4, Credibility = 0.2)
x7 = DataFrame(Possibilities = 7, Credibility = 0.2)
x8 = DataFrame(Possibilities = 10, Credibility = 0.2)

plot(layer(x=x1, Geom.density, color=["auto"]),
    layer(x=x2, Geom.density, color=["auto"]),
    layer(x=x3, Geom.density, color=["auto"]),
    layer(x=x4, Geom.density, color=["auto"]),
    Guide.xlabel("Possibilities"),
    Guide.ylabel("Credibility"),
    Guide.title("Prior"),
    Theme(
        background_color = "white",
        grid_color = "white"
    ),
    layer(x5, x = :Possibilities, y = :Credibility, Geom.bar(orientation = :vertical)),
    layer(x6, x = :Possibilities, y = :Credibility, Geom.bar(orientation = :vertical)),
    layer(x7, x = :Possibilities, y = :Credibility, Geom.bar(orientation = :vertical)),
    layer(x8, x = :Possibilities, y = :Credibility, Geom.bar(orientation = :vertical))   )
    #found the correct way to do this!
    # plot(layer(x->pdf(d, x), -4, 4, color=[colorant"black"]),
    #  Theme(
    #     background_color = "white",
    #     grid_color = "white"
    # ))


```

## Possibilities are parameter values in descriptive models

## The steps of Bayesian data analysis

> In general, Bayesian analysis of data follows these steps:
>
> 1. Identify the data relevant to the research questions. What are the measurement scales of the data? Which data variables are to be predicted, and which data variables are supposed to act as predictors?
> 2. Define a descriptive model for the relevant data. The mathematical form and its parameters should be meaningful and appropriate to the theoretical purposes of the analysis.
> 3. Specify a prior distribution on the parameters. The prior must pass muster with the audience of the analysis, such as skeptical scientists.
> 4. Use Bayesian inference to re-allocate credibility across parameter values. Interpret the posterior distribution with respect to theoretically meaningful issues (assuming that the model is a reasonable description of the data; see next step).
> 5. Check that the posterior predictions mimic the data with reasonable accuracy (i.e., conduct a “posterior predictive check”). If not, then consider a different descriptive model.
>
> Perhaps the best way to explain these steps is with a realistic example of Bayesian data analysis. The discussion that follows is abbreviated for purposes of this introductory chapter, with many technical details suppressed. (p. 25)

I will showcase the entire workflow here. In later chapters we’ll cover this workflow in much more detail. 

