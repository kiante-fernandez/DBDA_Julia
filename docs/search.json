[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Doing Bayesian Data Analysis in Julia using Turing.jl",
    "section": "",
    "text": "Kruschke began his text with, “This book explains how to actually do Bayesian data analysis, by real people (like you), for realistic data (like yours).” In the same way, this project is designed to help those real people do Bayesian data analysis. My contribution is converting Kruschke’s JAGS and Stan code for use in another probabilistic programming framework,Turing.jl, which makes it easier to fit Bayesian regression models in Julia (Ge, Xu, and Ghahramani (2018)) using a number of samplers. I also prefer plotting and data wrangling with the packages from Plots.jl(Bezanson et al. (2017)). So we’ll be using those methods, too.\nThis ebook is not meant to stand alone. It’s a supplement to the second edition of Kruschke (2015) Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan. Please give the source material some love.\n\n\nTo follow along with this guide, you’ll need some software. Download and install Julia by following the instructions at https://julialang.org/downloads/. The Getting Started page has in depth instructions that can help.\n\n\n\nI am just starting this project. I plan to have a complete draft including material from all the chapters in Kruschke’s text by January 2023\n\n\n\n\nBezanson, Jeff, Alan Edelman, Stefan Karpinski, and Viral B Shah. 2017. “Julia: A Fresh Approach to Numerical Computing.” SIAM Review 59 (1): 65–98. https://doi.org/10.1137/141000671.\n\n\nGe, Hong, Kai Xu, and Zoubin Ghahramani. 2018. “Turing: A Language for Flexible Probabilistic Inference.” In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain, 1682–90. http://proceedings.mlr.press/v84/ge18b.html.\n\n\nKruschke, John. 2015. Doing Bayesian Data Analysis (Second Edition). Boston: Academic Press."
  },
  {
    "objectID": "whats-in-this-book-read-this-first.html",
    "href": "whats-in-this-book-read-this-first.html",
    "title": "1  What’s in This Book (Read This First!)",
    "section": "",
    "text": "I am not a statistician and have no formal computer science background. I am in the process of learning the Julia programming language (part of the goal of this project!). I am currently a Ph.D. student in psychology. I have been mostly an R and MATLAB user and started learning Bayesian statistics around 2019. My code will likely be “bad” as I get the hang of things. I have much to learn from the Julia community and thus encourage folk to reach out with suggestions on how to improve my code. If you’d like to learn more about me, you can find my website at https://www.kiantefernandez.com/."
  },
  {
    "objectID": "whats-in-this-book-read-this-first.html#thank-you",
    "href": "whats-in-this-book-read-this-first.html#thank-you",
    "title": "1  What’s in This Book (Read This First!)",
    "section": "1.2 Thank you!",
    "text": "1.2 Thank you!\nA. Solomon Kurz really inspired this project. He has published multiple accessible introductory content on applied Bayesian analysis, complementing many of the books that taught me Bayesian statistics. I benefitted greatly from his free content. Go find him at: https://solomonkurz.netlify.com."
  },
  {
    "objectID": "introduction-credibility-models-and-parameters.html",
    "href": "introduction-credibility-models-and-parameters.html",
    "title": "2  Introduction: Credibility, Models, and Parameters",
    "section": "",
    "text": "To make Figure 2.1 we need data. We will create some synthetic data and store it in using DataFrames.jl\n\nusing DataFrames\n\nfunction expand_grid(; iters...)\n    var_names = collect(keys(iters))\n    var_itr = [1:length(x) for x in iters.data]\n    var_ix = vcat([collect(x)' for x in Iterators.product(var_itr...)]...)\n    out = DataFrame()\n    for i = 1:length(var_names)\n        out[:,var_names[i]] = collect(iters[i])[var_ix[:,i]]\n    end\n    return out\nend\n\nd = expand_grid(iteration=1:3, Possibilities=[\"a\", \"b\",\"c\", \"d\"], stage = [\"a\", \"b\"])\n\nd2 =DataFrame(Credibility =[fill(.25,4); 0; fill(1/3,3); 0; fill(1/3,3);0;.5;0;0.5;0;.5;0;0.5;fill(0,3);1])\n\nsort!(d, [:iteration])\nd.Credibility = d2.Credibility\n\n┌ Warning: use values(kwargs) and keys(kwargs) instead of kwargs.data and kwargs.itr\n│   caller = expand_grid(; iters::Base.Pairs{Symbol, AbstractVector, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iteration, :Possibilities, :stage), Tuple{UnitRange{Int64}, Vector{String}, Vector{String}}}}) at In[2]:5\n└ @ Main ./In[2]:5\n\n\n24-element Vector{Float64}:\n 0.25\n 0.25\n 0.25\n 0.25\n 0.0\n 0.3333333333333333\n 0.3333333333333333\n 0.3333333333333333\n 0.0\n 0.3333333333333333\n 0.3333333333333333\n 0.3333333333333333\n 0.0\n 0.5\n 0.0\n 0.5\n 0.0\n 0.5\n 0.0\n 0.5\n 0.0\n 0.0\n 0.0\n 1.0\n\n\nHere we are defining a function that creates combinations and then I just bind that we the Credibility values we will use for plotting.\nWe can take a look at the top few rows of the data with the first() function.\n\nfirst(d,5)\n\n\n5 rows × 4 columnsiterationPossibilitiesstageCredibilityInt64StringStringFloat6411aa0.2521ba0.2531ca0.2541da0.2551ab0.0\n\n\nNow lets plot our version of Figure 2.1:\n\nusing Plots\nusing VegaLite\n\n#bar(d.Possibilities, d.Credibility, layout = 6)\n\nd |>\n@vlplot(\n  :bar,\n  color=:green,\n  column = {\"iteration\",axis={title=\"\"}},\n  row = {\"stage:o\", sort = \"-stage\", axis={title=\"\"}},\n  x={\"Possibilities:n\", title=\"Possibilities\"},\n  color={\"Possibilities:n\", scale={range=[\"#89b8f5\"]}, axis={title=\"\"}, legend = \"\"},\n  y={\"Credibility\", axis={title=\"Credibility\", grid=false}},\n  height = 250)\n\n\n\n\nWARN column encoding should be discrete (ordinal / nominal / binned).\nWARN column encoding should be discrete (ordinal / nominal / binned)."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bezanson, Jeff, Alan Edelman, Stefan Karpinski, and Viral B Shah. 2017.\n“Julia: A Fresh Approach to Numerical Computing.” SIAM\nReview 59 (1): 65–98. https://doi.org/10.1137/141000671.\n\n\nGe, Hong, Kai Xu, and Zoubin Ghahramani. 2018. “Turing: A Language\nfor Flexible Probabilistic Inference.” In International\nConference on Artificial Intelligence and Statistics,\nAISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote,\nCanary Islands, Spain, 1682–90. http://proceedings.mlr.press/v84/ge18b.html.\n\n\nKruschke, John. 2015. Doing Bayesian Data Analysis (Second\nEdition). Boston: Academic Press."
  }
]